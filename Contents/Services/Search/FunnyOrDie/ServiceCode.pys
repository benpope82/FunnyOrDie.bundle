URL_BASE = 'http://www.funnyordie.com'
SEARCH_URL = 'http://www.funnyordie.com/search/a/videos?q=%s'

####################################################################################################
def Search(query):

    oc = ObjectContainer()
    url = SEARCH_URL % String.Quote(query, usePlus=True)
    search_page = HTML.ElementFromURL(url)

    for video in search_page.xpath('//article[contains(@class, "video-preview")]'):

        # Filter out any videos which are not hosted, but are instead 'embedded'. I've only found
        # one example of this, but didn't actually play online
        url = URL_BASE + video.xpath('./a/@href')[0]
        if url.startswith('http://www.funnyordie.com/videos/') == False:
            continue

        title = video.xpath('./a/@title')[0]
        thumb = video.xpath('./a/img/@src')[0]

        oc.add(VideoClipObject(
            url = url,
            title = title,
            thumb = Resource.ContentsOfURLWithFallback(url=thumb)
        ))

    return oc
